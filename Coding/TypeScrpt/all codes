eight:
var realUser = {
    email: 'test@test.com',
    firstName: 'Jordan',
    lastName: 'Hudgens',
    sayHi: function () {
        return "Hey there!";
    }
};
console.log(realUser.email);
console.log(realUser.firstName);
console.log(realUser.lastName);
console.log(realUser.sayHi());





function heythere() {
    console.log("Hi from typescript");
}

heythere();




function lineup() {
    var nowBatting = 1;
    return {
        nextBatter: function () { nowBatting++; },
        currentBatter: function () { return nowBatting; }
    };
}
var batters = lineup();
console.log(batters.currentBatter());
batters.nextBatter();
console.log(batters.currentBatter());
batters.nextBatter();
console.log(batters.currentBatter());
var pitchers = lineup();
console.log(pitchers.currentBatter());


var HelloAngularComponent = (function () {
    function HelloAngularComponent() {
        this.greeting = 'Hello TypeScript';
    }
    return HelloAngularComponent;
}());



var fullName;
fullName = function (first, last) {
    return first + " " + last;
};
console.log(fullName('Jordan', 'Hudgens'));
(function (first, last) {
    console.log(first + " " + last);
})('Tiffany', 'Hudgens');



function lineupCard(team) {
    var players = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        players[_i - 1] = arguments[_i];
    }
    console.log('Team: ' + team);
    for (var _a = 0, players_1 = players; _a < players_1.length; _a++) {
        var player = players_1[_a];
        console.log(player);
    }
}
lineupCard('Astros');



var players = [3, 10, 4, 5, 1];
console.log("For/In");
for (var playerr in players) {
    console.log(playerr);
}
console.log("For/Of");
for (var _i = 0, players_1 = players; _i < players_1.length; _i++) {
    var player = players_1[_i];
    console.log(player);
}
var names = ['Jordan', 'Tiffany', 'Kristine'];
var counter = 0;
(function () {
    for (var name_1 in names) {
        counter++;
    }
})();
console.log(counter);


var fulllName: string = "Jordan Hudgens";
let paiddAccount: boolean = true;
const versionNumber: number = 1.3;
fulllName = "Tiffany Hudgens";
paiddAccount = false;
console.log(fulllName);
console.log(paiddAccount);
console.log(versionNumber);
function printNames(f, l) {
    var greeting = "Hi there, ";
    console.log(greeting + f + " " + l);
    var greeting = "Hey there, ";
    console.log(greeting + f + " " + l);
}
printNames("Jordan", "Hudgens");


var Blog;
(function (Blog) {
    var Post = (function () {
        function Post(post) {
            this.title = post.title;
            this.body = post.body;
        }
        Post.prototype.printPost = function () {
            console.log(this.title);
            console.log(this.body);
        };
        return Post;
    }());
    Blog.Post = Post;
})(Blog || (Blog = {}));
var Content;
(function (Content) {
    var Post = (function () {
        function Post(post) {
            this.title = post.title;
            this.body = post.body;
            this.slug = post.slug;
            this.seoKeywords = post.seoKeywords;
        }
        Post.prototype.printPost = function () {
            console.log(this.title);
            console.log(this.body);
            console.log(this.slug);
            console.log(this.seoKeywords);
        };
        return Post;
    }());
    Content.Post = Post;
})(Content || (Content = {}));
var blogPost = new Blog.Post({
    title: "My Great Post",
    body: "Some content"
});
blogPost.printPost();
var contentPost = new Content.Post({
    title: "My Great Post",
    body: "Some content",
    slug: 'my-great-post',
    seoKeywords: 'any, words'
});
contentPost.printPost();

"use strict";
let performUpload = function (imgStatus) {
    return new Promise((resolve) => {
        console.log(`Status: ${imgStatus}`);
        setTimeout(() => {
            resolve({ imgStatus: imgStatus });
        }, 1000);
    });
};
var upload;
var compress;
var transfer;
performUpload('uploading...')
    .then((res) => {
        upload = res;
        return performUpload('compressing...');
    })
    .then((res) => {
        compress = res;
        return performUpload('transferring...');
    })
    .then((res) => {
        transfer = res;
        return performUpload('Image upload completed.');
    });


    





